/* stylelint-disable no-descending-specificity */
.ft-input-component {
  position: relative;
}

body[dir='rtl'] .ft-input-component.search.showClearTextButton .inputAction {
  inset-inline-end: -30px;
}

body[dir='rtl'] .ft-input-component.search.clearTextButtonVisible .inputAction,
body[dir='rtl'] .ft-input-component.search.showClearTextButton:focus-within .inputAction {
  inset-inline-end: 0;
}

.ft-input-component.search.showClearTextButton {
  padding-inline-start: 30px;
}

.ft-input-component.search.clearTextButtonVisible,
.ft-input-component.search.showClearTextButton:focus-within {
  padding-inline-start: 0;
}

.ft-input-component.showClearTextButton:not(.search) .ft-input {
  padding-inline-start: 46px;
}

/* Main search input */
.clearTextButtonVisible.search .ft-input,
.ft-input-component.search.showClearTextButton:focus-within .ft-input {
  padding-inline-start: 46px;
}

.ft-input-component:focus-within .clearInputTextButton {
  opacity: 0.5;
}

.clearTextButtonVisible .clearInputTextButton.visible,
.ft-input-component:focus-within .clearInputTextButton.visible {
  cursor: pointer;
  opacity: 1;
}

.disabled label,
.disabled .ft-input {
  opacity: 0.4;
  cursor: not-allowed;
}

.clearInputTextButton {
  position: absolute;
  inset-block-start: 5px;
  inset-inline-start: 0;

  /* To be higher than `.inputWrapper` */
  z-index: 1;
  margin-block: 0;
  margin-inline: 3px;
  padding: 10px;
  border-radius: 100%;
  background-color: transparent;
  color: var(--color-on-surface);
  opacity: 0;
  transition: background 0.2s ease-in;

  &.visible:hover {
    background-color: var(--color-surface-container-high);
    color: var(--color-on-surface-variant);
  }

  &.visible:active {
    background-color: var(--color-surface-container-pressed);
    color: var(--color-on-surface-variant);
    transition: background 0.2s ease-in;
  }
}

.search .clearInputTextButton {
  inset-block-start: 12px;
}

.forceTextColor .clearInputTextButton {
  background-color: var(--color-primary-pressed);
  color: var(--color-on-primary-hover);

  &:hover {
    background-color: var(--color-primary-hover);
    color: var(--color-on-primary-hover);
  }

  &:active {
    background-color: var(--color-primary-pressed);
    color: var(--color-on-primary-pressed);
  }
}

.ft-input {
  box-sizing: border-box;
  outline: none;
  inline-size: 100%;
  padding: 1rem;
  border: 0;
  margin-block-end: 10px;
  font-size: 16px;
  block-size: 45px;
  border-radius: 24px;
  background-color: var(--color-surface-container-low);
  color: var(--color-on-surface-variant);
}

.forceTextColor .ft-input {
  background-color: var(--color-primary-hover);
  color: var(--color-on-primary-hover);
}

.forceTextColor .ft-input:focus {
  background-color: var(--color-primary-container);
  color: var(--color-on-primary-container);
  transition: box-shadow 0.2s ease-in-out;
}

.inputWrapper {
  position: relative;
}

.inputAction {
  position: absolute;
  margin-block: 0;
  margin-inline: 3px;
  padding: 10px;
  inset-block-start: -8px;
  inset-inline-end: 0;
  border-radius: 100%;
  background-color: transparent;
  color: var(--color-on-surface);

  /* this should look disabled by default */
  opacity: 0.5;
}

.inputAction.enabled {
  background-color: transparent;
  color: var(--color-on-surface);
  opacity: 1;

  /* Only look respond to cursor when enabled */
  cursor: pointer;

  &:hover {
    background-color: var(--color-surface-container-high);
    color: var(--color-on-surface-variant);
    transition: background 0.2s ease-in;
  }

  &:active {
    background-color: var(--color-surface-container-pressed);
    color: var(--color-on-surface-variant);
    transition: background 0.2s ease-in;
  }
}

.forceTextColor .inputAction.enabled {
  background-color: var(--color-primary-pressed);
  color: var(--color-on-primary-hover);

  &:hover {
    background-color: var(--color-primary-hover);
    color: var(--color-on-primary-hover);
  }

  &:active {
    background-color: var(--color-primary-pressed);
    color: var(--color-on-primary-pressed);
  }
}

.inputAction:not(:enabled),
.ftcomponent ::placeholder {
  color: var(--color-on-surface);
  user-select: none;
}

.forceTextColor .inputAction:not(:enabled),
.forceTextColor ::placeholder {
  color: var(--color-on-primary);
}

.search ::-webkit-calendar-picker-indicator {
  display: none;
}

.ft-input-component.showActionButton .ft-input {
  /*
  With arrow present means
  the text might get under the arrow with normal padding
   */
  padding-inline-end: calc(36px + 6px);
}

.list {
  position: absolute;
  inline-size: 100%;
  list-style: none;
  padding: 4px;
  margin: 0;
  z-index: 10;
  border-radius: 8px;
  word-wrap: break-word;
  box-shadow: 0 2px 6px 2px var(--color-surface);
  background-color: var(--color-surface-container-low);

  li {
    display: block;
    padding-block: 0;
    padding-inline: 16px;
    line-height: 2rem;
    border-radius: 4px;
    gap: 4px;
  }

  li:hover {
    background-color: var(--color-surface-container-high);
    color: var(--color-on-surface-variant);
  }
}
